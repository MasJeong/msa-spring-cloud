version: '2'

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      my-network:
        ipv4_address: 172.18.0.100
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes  # 익명 로그인 허용 (보안상 주의 필요)

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"  # Kafka 브로커의 기본 포트
      - "9094:9094"  # 외부 접근용 추가 포트
    networks:
      my-network:
        ipv4_address: 172.18.0.101
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.18.0.101
      KAFKA_BROKER_ID: 1  # 브로커 고유 식별자
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: yes  # 암호화되지 않은 연결 허용 (보안상 주의 필요)
      KAFKA_ENABLE_KRAFT: no  # KRaft(Kafka Raft) 모드 비활성화, Zookeeper 사용
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true  # 토픽이 존재하지 않을 때 자동으로 생성
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://:9094  # 내부(9092)와 외부(9094) 연결을 위한 리스너 설정
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9094  # 클라이언트에게 알려질 리스너 주소
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT  # 각 리스너의 보안 프로토콜 매핑
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL  # 브로커 간 통신에 사용할 리스너 이름
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # 오프셋 토픽의 복제 팩터, 단일 브로커 설정에서는 1로 설정

  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    container_name: kafka-connect
    depends_on:
      - kafka
    ports:
      - "8083:8083"
    networks:
      my-network:
        ipv4_address: 172.18.0.102
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8083  # REST API 포트 설정
      CONNECT_GROUP_ID: compose-connect-group  # Kafka Connect 워커 그룹 ID
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs  # 커넥터 설정을 저장할 토픽
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets  # 오프셋 정보를 저장할 토픽
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status  # 상태 정보를 저장할 토픽
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1  # 설정 저장 토픽의 복제 팩터
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1  # 오프셋 저장 토픽의 복제 팩터
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1  # 상태 저장 토픽의 복제 팩터
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter  # 키 변환기 설정
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter  # 값 변환기 설정
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter  # 내부 키 변환기
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter  # 내부 값 변환기
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect  # REST 인터페이스의 호스트 이름
      CONNECT_LOG4J_ROOT_LOGLEVEL: DEBUG
      CONNECT_LOG4J_LOGGERS: org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/etc/kafka-connect/jars  # 커넥터 플러그인 경로
    volumes:
      - C:/kafka/kafka-connect/docker-jars:/etc/kafka-connect/jars  # connect jar 파일 경로

networks:
  my-network:
    external: true
    name: ecommerce-network


#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    container_name: kafka-ui
#    depends_on:
#      - kafka
#    ports:
#      - "9091:8080"
#    restart: always
#    environment:
#      DYNAMIC_CONFIG_ENABLED: true # 동적 구성 허용
#      KAFKA_CLUSTERS_0_NAME: masjeong_kafka  # kafka 클러스터 이름 설정
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092  # kafka 클러스터에 연결할 부트스트랩 서버 설정