server:
  port: 8000

logging:
  level:
    com.example.apigatewayservice: DEBUG
    org.springframework: INFO
    root: INFO

spring:
  application:
    name: apigateway-service
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      database: 0
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    # local rabbitmq 계정 정보 admin / admin
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}
    # docker rabbitmq 계정 정보 guest / guest
#    username: '{cipher}AQBx8CFN7GRJXYF/UJFZrSbvGYlvRFkrBv7sSAWkfpKwJEp1P/Q2mFarLUHvIzisSdg0f4tR0zxwkEIiBiiJnYlzZkCVzce11tdJFjFtR7sbueCyPkFtg5gusNqXaxSddxJhb49mwNKABf7h2jBNfVzaAaAyFvJ3R7MLkZuuT3JXIpQQqdsG6R0C7tvYxIEWvQqW5IIYnzA2yf1xD6XtGqKLtz2MLuOphDnHNiXgpNln1EiU0QyUpl0n1PbS4QTZ9ruoHGL1eWDammyKsekAE2ZoQCWYpOBnLWt0iyUeqHF8CABaYkIIhvAS6BssMYCYXj045yuipMqn/CTZXFrO3t27rceaRtFxId5Q/NhK+p1d23i+hkPEXCJKBOG9Hdfl0aM='
#    password: '{cipher}AQAgLrGQPHfKz53HIpZHS7glE4BqTWtzzW3uSpWWCr8ewZeA3qdTwEiZDVI/mpP0UCVwruxmn/dzbPyHOdOr6FafX/Es+SaQcTjQONqGDJHenIc5zFAq+kQjjb4pDXID22LfkaUvsDffCANVmhqUXEec+WGb3rIIvKhML++ZdkPwtc4U+/upUzaRSClXM53pkah6MGEYU48NoxgQUKBfKD5PpfNTIev+UkU1QmfKxZXAvdizsM2NQnQ1z68juUgo2FNfjf/bcd6rrNnuNanJdR5YMUu/JfzjQFn2IFuvHge5WdEjh1Yq8ksn7bTQSi1Zk8k4+M/ZF+iFCASPuCklOdQZW8S+ljK+EP8if437ropWw8oakVjbZit2QLaxVG0OLGo='
  cloud:
    gateway:
      # Global Filter 설정 - Global과 Custom, Logging Filter 모두 적용 가능
      default-filters:
        - name: GlobalFilter # GlobalFilter 파일명
          args:              # GlobalFilter.Config 파라미터 세팅
            baseMessage: Spring Cloud Gateway Filter
            preLogger: true
            postLogger: true
      routes:
        # 사용자 로그인
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie # 헤더 값 초기화
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # 쉼표 기준 전자 url을 후자로 변경함
        # 사용자 회원가입
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        # Actuator 라우팅 설정
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        # 사용자 GET 요청
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - name: AuthorizationHeaderFilter
#            - name: RedisRateLimitFilter # 2024-12-16 custom 필터 사용하지 않음
            - name: RequestRateLimiter
#              args:
#                key-resolver: "#{@userKeyResolver}"
#                redis-rate-limiter.replenishRate: 10  # 초당 10개씩 토큰 생성
#                redis-rate-limiter.burstCapacity: 10  # 버킷 용량 (토큰 최대 10개)
#                redis-rate-limiter.requestedTokens: 1 # 요청 시 1개의 토큰을 사용
        # order-service Actuator 라우팅 설정
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/order-service/(?<segment>.*), /$\{segment}
        # order-service
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**
          filters:
            - RemoveRequestHeader=Cookie
            - name: AuthorizationHeaderFilter
        # catalog service
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
        # first service
        - id: first-service
          uri: lb://MY-FIRST-SERVICE
          predicates:
            - Path=/first-service/**
          filters:
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-response, first-response-header2
            - CustomFilter # CustomFilter 파일명
        # second service
        - id: second-service
          uri: lb://MY-SECOND-SERVICE
          predicates:
            - Path=/second-service/**
          filters:
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-response, second-response-header2
            - name: CustomFilter  # CustomFilter 파일명
            - name: LoggingFilter # LoggingFilter 파일명
              args:
                baseMessage: hi, there.
                preLogger: true
                postLogger: true

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://discovery-service:8761/eureka

# Actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace, busrefresh, info, metrics, prometheus